<?php
    /**
     * Camille Reynders, http://www.creynders.be
     * 06/08/12 - 10:56
     */

    module_load_include( 'api.campaign.inc', 'scoga', 'api/scoga' );

    class ScogaAPICampaignTestCase extends UnitTestCase {
        public function getInfo(){
            return array(
                'name'        => 'SCOGA Campaigns API test',
                'description' => 'Test SCOGA campaigns API',
                'group'       => 'SCOGA',
            );
        }

        public function setUp() {
            parent::setUp( array( 'scoga', 'scoga_feature' ) );
        }

        private function createCampaignNode(){
            $node_options = array(
                'type' => SCOGA_CAMPAIGN_NODETYPE,
                'title' => $this->randomName( 32 ),
            );
            $node = $this->drupalCreateNode( $node_options );

            return $node;
        }

        public function test_scoga_create_campaign_vo(){

            //setup

            $created_node = $this->createCampaignNode();
            scoga_set_field_value( $created_node, 'field_campaign_period', 1344339900, array( 'field_column' => 'value' ));
            scoga_set_field_value( $created_node, 'field_campaign_period', 1344771900, array( 'field_column' => 'value2' ) );
            node_save( $created_node );

            //tests
            $vo = scoga_create_campaign_vo( $created_node );
            $this->assertNotNull( $vo, 'should not be null' );
            $this->assertTrue( $vo instanceof Campaign, 'should be of type Campaign' );
            $this->assertIdentical( $vo->nid, $created_node->nid );
            $this->assertIdentical( $vo->title, $created_node->title );

            //teardown
            node_delete( $created_node->nid );
        }

        public function test_scoga_get_campaign_vo_by_nid(){

            //setup
            $created_node = $this->createCampaignNode();

            //test it should return a campaing VO with correct values
            scoga_set_field_value( $created_node, 'field_campaign_period', 1344339900, array( 'field_column' => 'value' ));
            scoga_set_field_value( $created_node, 'field_campaign_period', 1344771900, array( 'field_column' => 'value2' ) );
            node_save( $created_node );
            $vo = scoga_get_campaign_vo_by_nid( $created_node->nid );
            $this->assertNotNull( $vo, 'should not be null' );
            $this->assertTrue( $vo instanceof Campaign, 'should be of type Campaign' );
            $this->assertIdentical( $vo->nid, $created_node->nid );
            $this->assertIdentical( $vo->title, $created_node->title );

            //teardown
            node_delete( $created_node->nid );
        }

        public function test_scoga_get_campaign_for_time(){
            $this->verbose( 'test_scoga_get_campaign_for_time' );

            $now = time();

            //setup
            $created_node = $this->createCampaignNode();

            //should return nid if found
            scoga_set_field_value( $created_node, 'field_campaign_period', $now - ( 60 * 60 ), array( 'field_column' => 'value' ));
            scoga_set_field_value( $created_node, 'field_campaign_period', $now + ( 60 * 60 ), array( 'field_column' => 'value2' ) );
            node_save( $created_node );
            $nid = scoga_get_campaign_nid_for_time( $now );

            $this->assertNotNull( $nid );
            $this->assertIdentical( $created_node->nid, $nid );

            //should return -1 if no nodes found
            scoga_set_field_value( $created_node, 'field_campaign_period', $now - ( 60 * 60 ), array( 'field_column' => 'value' ));
            scoga_set_field_value( $created_node, 'field_campaign_period', $now - ( 60 * 1 ), array( 'field_column' => 'value2' ) );
            node_save( $created_node );
            $nid = scoga_get_campaign_nid_for_time( $now );

            $this->assertNotNull( $nid );
            $this->assertTrue( $nid < 0 );

            //teardown
            node_delete( $created_node->nid );
        }
    }
